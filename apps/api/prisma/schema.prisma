// ============================
// Prisma Generator & Datasource
// ============================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================
// Enums
// ============================
enum Role {
  ADMIN
  MANAGER
  AGENT
  VIEWER
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  LAND
  COMMERCIAL
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  RESERVED
  SOLD
  RENTED
}

enum DealStatus {
  OPEN
  WON
  LOST
}

enum TaskStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// NEW: prioridade em tarefas
enum TaskPriority {
  LOW
  NORMAL
  HIGH
}

// NEW: estágios configuráveis (tipo)
enum StageType {
  SALES
  SUPPORT
}

// NEW: WhatsApp tipos e status de mensagens
enum MessageType {
  TEXT
  IMAGE
  DOC
  TEMPLATE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

// NEW: assinatura
enum SubStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}

// ============================
// Tenant
// ============================
model Tenant {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // NEW: soft delete

  users        User[]
  properties   Property[]
  leads        Lead[]
  deals        Deal[]
  tasks        Task[]
  waAccount    WhatsAppAccount?
  owners       Owner[] // CHANGED: renomeado de Owner -> owners (convenção plural)
  messages     WhatsAppMessage[] // CHANGED: renomeado de WhatsAppMessage -> messages
  stages       Stage[] // NEW: estágios configuráveis por tenant
  tags         Tag[] // NEW
  notes        Note[] // NEW
  logs         ActivityLog[] // NEW
  subscription Subscription? // NEW
  usage        Usage? // NEW

  @@index([deletedAt])
}

// ============================
// Usuários
// ============================
model User {
  id        String    @id @default(uuid())
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String
  email     String
  password  String
  role      Role      @default(AGENT)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // NEW: soft delete

  leads       Lead[] // CHANGED: renomeado Lead -> leads (convenção plural)
  tasks       Task[] // CHANGED: renomeado Task -> tasks
  Note        Note[]
  ActivityLog ActivityLog[]

  // CHANGED: unicidade por tenant (permite mesmo email em tenants diferentes)
  @@unique([tenantId, email])
  @@index([tenantId, role, isActive])
  @@index([deletedAt])
}

// ============================
// Imóveis
// ============================
model Property {
  id       String @id @default(uuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  code        String // CHANGED: deixou de ser @unique global
  title       String
  description String?
  type        PropertyType
  status      PropertyStatus @default(ACTIVE)
  price       Decimal?       @db.Decimal(12, 2)
  bedroom     Int?
  bathroom    Int?
  parking     Int?
  area        Float?
  address     Address?
  features    Json?
  media       Media[]

  ownerId String?
  owner   Owner?  @relation(fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // NEW: soft delete

  leads Lead[] // CHANGED: renomeado Lead -> leads
  deals Deal[] // CHANGED: renomeado Deal -> deals
  tasks Task[] // CHANGED: renomeado Task -> tasks
  notes Note[] // NEW

  // CHANGED: unicidade por tenant
  @@unique([tenantId, code])
  // NEW: índices úteis
  @@index([tenantId, status])
  @@index([tenantId, price])
  @@index([tenantId, type])
  @@index([tenantId, createdAt])
  @@index([deletedAt])
}

// Endereço 1:1 com Property
model Address {
  id         String   @id @default(uuid())
  propertyId String   @unique
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  street     String?
  number     String?
  district   String?
  city       String
  state      String
  zip        String?
  lat        Float?
  lng        Float?
}

// Mídias do imóvel
model Media {
  id         String   @id @default(uuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url        String
  alt        String?
  isCover    Boolean  @default(false)
  order      Int      @default(0)

  @@index([propertyId, isCover, order])
}

// Proprietários
model Owner {
  id         String     @id @default(uuid())
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name       String
  phone      String?
  email      String?
  notes      String?
  properties Property[]

  @@index([tenantId, name])
  @@index([tenantId, email])
  @@index([tenantId, phone])
}

// ============================
// Pipeline (Stages) - NEW
// ============================
model Stage {
  id       String    @id @default(uuid())
  tenantId String
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name     String
  type     StageType @default(SALES)
  order    Int
  isWon    Boolean   @default(false)
  isLost   Boolean   @default(false)
  color    String?

  leads Lead[]

  @@unique([tenantId, name])
  @@index([tenantId, order])
}

// ============================
// Leads / Deals / Tasks
// ============================
model Lead {
  id       String @id @default(uuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  name    String
  phone   String?
  email   String?
  source  LeadSource @default(WEB) // mantido seu enum de origem
  // CHANGED: estágio agora é dinâmico via Stage
  stageId String?
  stage   Stage?     @relation(fields: [stageId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  assignedTo String?
  agent      User?   @relation(fields: [assignedTo], references: [id], onDelete: SetNull, onUpdate: Cascade)

  notesText  String? // CHANGED: renomeado 'notes' -> 'notesText' p/ não conflitar c/ Note[]
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // NEW: soft delete

  deals    Deal[] // CHANGED: renomeado Deal -> deals
  tasks    Task[] // CHANGED: renomeado Task -> tasks
  messages WhatsAppMessage[] // CHANGED: renomeado WhatsAppMessage -> messages
  notes    Note[] // NEW
  leadTags LeadTag[] // NEW

  @@index([tenantId, createdAt])
  @@index([tenantId, stageId])
  @@index([tenantId, assignedTo])
  @@index([tenantId, phone])
  @@index([tenantId, email])
  @@index([deletedAt])
}

enum LeadSource {
  WEB
  PHONE
  REFERRAL
  SOCIAL
  OTHER
}

model Deal {
  id       String @id @default(uuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  leadId String
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  value  Decimal    @db.Decimal(12, 2)
  status DealStatus @default(OPEN)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // NEW: soft delete

  @@index([tenantId, status])
  @@index([leadId])
  @@index([propertyId])
  @@index([deletedAt])
}

model Task {
  id       String @id @default(uuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  title    String
  dueDate  DateTime?
  status   TaskStatus   @default(PENDING)
  priority TaskPriority @default(NORMAL) // NEW

  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  leadId String?
  lead   Lead?   @relation(fields: [leadId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // NEW: subtarefas e lembrete
  parentId   String?
  parent     Task?     @relation("SubTasks", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subTasks   Task[]    @relation("SubTasks")
  reminderAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // NEW: soft delete

  @@index([tenantId, status, dueDate])
  @@index([assigneeId, status, dueDate])
  @@index([deletedAt])
}

// ============================
// WhatsApp Business
// ============================
model WhatsAppAccount {
  id       String @id @default(uuid())
  tenantId String @unique // 1 conta por tenant (mantido)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  businessId    String // Meta Business ID
  phoneNumberId String @unique // CHANGED: único globalmente (prática comum)
  accessToken   String // armazenar seguro no app/KMS
  webhookSecret String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages WhatsAppMessage[]
}

model WhatsAppMessage {
  id       String @id @default(uuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  waAccountId String
  waAccount   WhatsAppAccount @relation(fields: [waAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  leadId String?
  lead   Lead?   @relation(fields: [leadId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  direction  MessageDirection
  fromNumber String
  toNumber   String

  // NEW: tipagem/estado/mídia/erros
  type      MessageType   @default(TEXT)
  content   String?
  mediaUrl  String?
  mediaMime String?
  template  String?
  status    MessageStatus @default(SENT)
  errorCode String?
  errorMsg  String?

  waMessageId String? @unique

  createdAt DateTime @default(now())

  @@index([tenantId, createdAt])
  @@index([leadId, createdAt])
  @@index([waAccountId, createdAt])
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

// ============================
// Tags / Notas / Auditoria - NEW
// ============================
model Tag {
  id       String  @id @default(uuid())
  tenantId String
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name     String
  color    String?

  leadTags LeadTag[]

  @@unique([tenantId, name])
}

model LeadTag {
  leadId String
  tagId  String
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([leadId, tagId])
}

model Note {
  id       String  @id @default(uuid())
  tenantId String
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String?
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  leadId String?
  lead   Lead?   @relation(fields: [leadId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  content   String
  createdAt DateTime @default(now())

  @@index([tenantId, createdAt])
}

model ActivityLog {
  id       String  @id @default(uuid())
  tenantId String
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actorId  String?
  actor    User?   @relation(fields: [actorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  entity    String // "Lead","Property","Deal","Task","WhatsAppMessage"
  entityId  String
  action    String // "CREATE","UPDATE","STATUS_CHANGE"... (livre)
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([tenantId, entity, entityId])
  @@index([tenantId, createdAt])
}

// ============================
// Planos / Assinaturas / Uso - NEW
// ============================
model Plan {
  id            String  @id @default(uuid())
  name          String
  price         Float
  currency      String  @default("BRL")
  maxUsers      Int?
  maxProperties Int?
  maxContacts   Int?
  hasAPI        Boolean @default(false)
  description   String?

  subscriptions Subscription[]

  @@unique([name])
}

model Subscription {
  id       String @id @default(uuid())
  tenantId String @unique // 1 assinatura ativa por tenant (simplificação)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  planId String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  status    SubStatus @default(ACTIVE)
  startedAt DateTime  @default(now())
  expiresAt DateTime?
  renewedAt DateTime?

  // add-ons podem ser adicionados depois se necessário
}

model Usage {
  id       String @id @default(uuid())
  tenantId String @unique
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  propertiesCount Int      @default(0)
  contactsCount   Int      @default(0)
  updatedAt       DateTime @updatedAt
}
